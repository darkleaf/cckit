// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package events

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	peer "github.com/hyperledger/fabric-protos-go/peer"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChaincodeEventClient is the client API for ChaincodeEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChaincodeEventClient interface {
	EventStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ChaincodeEvent_EventStreamClient, error)
}

type chaincodeEventClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeEventClient(cc grpc.ClientConnInterface) ChaincodeEventClient {
	return &chaincodeEventClient{cc}
}

func (c *chaincodeEventClient) EventStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ChaincodeEvent_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChaincodeEvent_ServiceDesc.Streams[0], "/events.ChaincodeEvent/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaincodeEventEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChaincodeEvent_EventStreamClient interface {
	Recv() (*peer.ChaincodeEvent, error)
	grpc.ClientStream
}

type chaincodeEventEventStreamClient struct {
	grpc.ClientStream
}

func (x *chaincodeEventEventStreamClient) Recv() (*peer.ChaincodeEvent, error) {
	m := new(peer.ChaincodeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChaincodeEventServer is the server API for ChaincodeEvent service.
// All implementations must embed UnimplementedChaincodeEventServer
// for forward compatibility
type ChaincodeEventServer interface {
	EventStream(*empty.Empty, ChaincodeEvent_EventStreamServer) error
	mustEmbedUnimplementedChaincodeEventServer()
}

// UnimplementedChaincodeEventServer must be embedded to have forward compatible implementations.
type UnimplementedChaincodeEventServer struct {
}

func (UnimplementedChaincodeEventServer) EventStream(*empty.Empty, ChaincodeEvent_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedChaincodeEventServer) mustEmbedUnimplementedChaincodeEventServer() {}

// UnsafeChaincodeEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChaincodeEventServer will
// result in compilation errors.
type UnsafeChaincodeEventServer interface {
	mustEmbedUnimplementedChaincodeEventServer()
}

func RegisterChaincodeEventServer(s grpc.ServiceRegistrar, srv ChaincodeEventServer) {
	s.RegisterService(&ChaincodeEvent_ServiceDesc, srv)
}

func _ChaincodeEvent_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChaincodeEventServer).EventStream(m, &chaincodeEventEventStreamServer{stream})
}

type ChaincodeEvent_EventStreamServer interface {
	Send(*peer.ChaincodeEvent) error
	grpc.ServerStream
}

type chaincodeEventEventStreamServer struct {
	grpc.ServerStream
}

func (x *chaincodeEventEventStreamServer) Send(m *peer.ChaincodeEvent) error {
	return x.ServerStream.SendMsg(m)
}

// ChaincodeEvent_ServiceDesc is the grpc.ServiceDesc for ChaincodeEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChaincodeEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.ChaincodeEvent",
	HandlerType: (*ChaincodeEventServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _ChaincodeEvent_EventStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events/event.proto",
}
