// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	schema "github.com/s7techlab/cckit/examples/cpaper_asservice/schema"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CPaperClient is the client API for CPaper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CPaperClient interface {
	// List method returns all registered commercial papers
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.CommercialPaperList, error)
	// Get method returns commercial paper data by id
	Get(ctx context.Context, in *schema.CommercialPaperId, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
	// GetByExternalId
	GetByExternalId(ctx context.Context, in *schema.ExternalId, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
	// Issue commercial paper
	Issue(ctx context.Context, in *schema.IssueCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
	// Buy commercial paper
	Buy(ctx context.Context, in *schema.BuyCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
	// Redeem commercial paper
	Redeem(ctx context.Context, in *schema.RedeemCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
	// Delete commercial paper
	Delete(ctx context.Context, in *schema.CommercialPaperId, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
}

type cPaperClient struct {
	cc grpc.ClientConnInterface
}

func NewCPaperClient(cc grpc.ClientConnInterface) CPaperClient {
	return &cPaperClient{cc}
}

func (c *cPaperClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.CommercialPaperList, error) {
	out := new(schema.CommercialPaperList)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Get(ctx context.Context, in *schema.CommercialPaperId, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) GetByExternalId(ctx context.Context, in *schema.ExternalId, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/GetByExternalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Issue(ctx context.Context, in *schema.IssueCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/Issue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Buy(ctx context.Context, in *schema.BuyCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Redeem(ctx context.Context, in *schema.RedeemCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/Redeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Delete(ctx context.Context, in *schema.CommercialPaperId, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CPaperServer is the server API for CPaper service.
// All implementations must embed UnimplementedCPaperServer
// for forward compatibility
type CPaperServer interface {
	// List method returns all registered commercial papers
	List(context.Context, *empty.Empty) (*schema.CommercialPaperList, error)
	// Get method returns commercial paper data by id
	Get(context.Context, *schema.CommercialPaperId) (*schema.CommercialPaper, error)
	// GetByExternalId
	GetByExternalId(context.Context, *schema.ExternalId) (*schema.CommercialPaper, error)
	// Issue commercial paper
	Issue(context.Context, *schema.IssueCommercialPaper) (*schema.CommercialPaper, error)
	// Buy commercial paper
	Buy(context.Context, *schema.BuyCommercialPaper) (*schema.CommercialPaper, error)
	// Redeem commercial paper
	Redeem(context.Context, *schema.RedeemCommercialPaper) (*schema.CommercialPaper, error)
	// Delete commercial paper
	Delete(context.Context, *schema.CommercialPaperId) (*schema.CommercialPaper, error)
	mustEmbedUnimplementedCPaperServer()
}

// UnimplementedCPaperServer must be embedded to have forward compatible implementations.
type UnimplementedCPaperServer struct {
}

func (UnimplementedCPaperServer) List(context.Context, *empty.Empty) (*schema.CommercialPaperList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCPaperServer) Get(context.Context, *schema.CommercialPaperId) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCPaperServer) GetByExternalId(context.Context, *schema.ExternalId) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByExternalId not implemented")
}
func (UnimplementedCPaperServer) Issue(context.Context, *schema.IssueCommercialPaper) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (UnimplementedCPaperServer) Buy(context.Context, *schema.BuyCommercialPaper) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedCPaperServer) Redeem(context.Context, *schema.RedeemCommercialPaper) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redeem not implemented")
}
func (UnimplementedCPaperServer) Delete(context.Context, *schema.CommercialPaperId) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCPaperServer) mustEmbedUnimplementedCPaperServer() {}

// UnsafeCPaperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CPaperServer will
// result in compilation errors.
type UnsafeCPaperServer interface {
	mustEmbedUnimplementedCPaperServer()
}

func RegisterCPaperServer(s grpc.ServiceRegistrar, srv CPaperServer) {
	s.RegisterService(&CPaper_ServiceDesc, srv)
}

func _CPaper_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.CommercialPaperId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Get(ctx, req.(*schema.CommercialPaperId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_GetByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ExternalId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).GetByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/GetByExternalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).GetByExternalId(ctx, req.(*schema.ExternalId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Issue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.IssueCommercialPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Issue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/Issue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Issue(ctx, req.(*schema.IssueCommercialPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.BuyCommercialPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Buy(ctx, req.(*schema.BuyCommercialPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Redeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.RedeemCommercialPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Redeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/Redeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Redeem(ctx, req.(*schema.RedeemCommercialPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.CommercialPaperId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Delete(ctx, req.(*schema.CommercialPaperId))
	}
	return interceptor(ctx, in, info, handler)
}

// CPaper_ServiceDesc is the grpc.ServiceDesc for CPaper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CPaper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cpaper_asservice.service.CPaper",
	HandlerType: (*CPaperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CPaper_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CPaper_Get_Handler,
		},
		{
			MethodName: "GetByExternalId",
			Handler:    _CPaper_GetByExternalId_Handler,
		},
		{
			MethodName: "Issue",
			Handler:    _CPaper_Issue_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _CPaper_Buy_Handler,
		},
		{
			MethodName: "Redeem",
			Handler:    _CPaper_Redeem_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CPaper_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpaper_asservice/service/service.proto",
}
